{"version":3,"sources":["components/card/card-component.jsx","components/card-list/card-list-component.jsx","components/search-box/search-box-component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monsters","id","name","email","CardList","console","log","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","monster","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAEaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,SAASC,GAAzC,4BAEL,kCAASL,EAAMI,SAASC,IACxB,mCAAML,EAAMI,SAASE,QACrB,kCAAKN,EAAMI,SAASG,aCPXC,EAAW,SAACR,GAEvB,OADAS,QAAQC,IAAIV,GAEV,sBAAKC,UAAU,YAAf,UACGD,EAAMI,SAASO,KAAI,SAACP,GAAD,OAClB,cAAC,EAAD,CAAwBA,SAAUA,GAAvBA,EAASC,OAClB,QCHGO,G,aAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OACE,uBACEb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoCDG,E,kDA1Cb,aAAe,IAAD,8BACZ,gBAcFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAdtC,EAAKC,MAAQ,CACXnB,SAAU,GACVgB,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEf,SAAUwB,S,oBAO/C,WAEE,MAAkCC,KAAKN,MAA/BnB,EAAR,EAAQA,SAAUgB,EAAlB,EAAkBA,YAMZU,EAAmB1B,EAAS2B,QAAO,SAACC,GAAD,OACvCA,EAAQ1B,KAAK2B,cAAcC,SAASd,EAAYa,kBAGlD,OACE,sBAAKhC,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CACEY,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUV,SAAU0B,W,GAtCVK,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.6c8e88b6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card-styles.css\";\nexport const Card = (props) => (\n  <div className=\"card-container\">\n    <img\n      alt=\"monster\"\n      src={`https://robohash.org/${props.monsters.id}?set=set2&size=180x180`}\n    />\n    <h1 key={props.monsters.id}> </h1>\n    <h2> {props.monsters.name}</h2>\n    <p> {props.monsters.email}</p>\n  </div>\n);\n","import React from \"react\";\nimport \"./card-list-styles.css\";\nimport { Card } from \"../card/card-component\";\nexport const CardList = (props) => {\n  console.log(props);\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map((monsters) => (\n        <Card key={monsters.id} monsters={monsters} />\n      ))}{\" \"}\n    </div>\n  );\n};\n// Props are the parameter u get from the functional component\n","import { isPlaceholder } from \"@babel/types\";\nimport React from \"react\";\nimport \"./search-box-styles.css\";\n\n//Search box doesn't have access to State\n// Search doesn't have access to life cycle methods because we don't alwaysneed to use lifecycle methods to determine state\nexport const SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={handleChange} //On Change Makes Set State Less Asynchronous\n    />\n  );\n  //\n};\n\n// functional component that gets some props and returns some HTML\n// Easier to Write\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list-component\";\nimport { SearchBox } from \"./components/search-box/search-box-component\";\n\nclass App extends Component {\n  constructor() {\n    super(); //  calls the constructor method on this component class\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    }; // End Constructor\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users })); // Semi colon goes on the last .then()\n    // .then((response) => console.log(response));\n  } // end ComponentDidMount\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n  render() {\n    // Using Destructing  - Allows u to pull properities out of objects and put them into constant variables\n    const { monsters, searchField } = this.state;\n\n    /*\n    equivalent to const monsters = this.state.monsters;\n    */\n\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"search monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}